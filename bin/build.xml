<?xml version="1.0" encoding="UTF-8"?>
    <project name="TranformXml" default="extended">
        <dirname property="buildfile.dir" file="${ant.file}"/>
        
        <!-- The following switches can be passed when invoking ant to provide custom values -->
        <property name="data.dir"  value="../cudl-data-source"/><!-- Source of the original data files -->
        <property name="collection.json.dir"  value="${data.dir}/collections"/><!-- Source of the collection json files -->
        <property name="dist.dir"  value="../dist"/><!-- Target directory for all reuseable resources -->
        <property name="files-to-process" value="*.xml"/><!-- File(s) to build -->
        
        <!-- Internal directories used during the build process -->
        <property name="chunk.dir"  value="../chunk"/><!-- Chunk directory: target of the chunking process; source of data for the pagify process -->
        <property name="tmp.dir"  value="../tmp"/><!-- Target directory for the TEI XML page extract files -->
        <property name="dev.null"  value="../dev.null"/><!-- Destination directory for empty junk files created by ant's xslt task when running pagify.xsl -->
        
        <!-- Output subdirectories contained within $dist.dir -->
        <property name="www.dir"  value="${dist.dir}/www"/><!-- Target directory for web resources -->
        <property name="checksum-src.dir"  value="${dist.dir}/checksum-src"/>
        <property name="core_xml.dir"  value="${dist.dir}/core-xml"/><!-- target of the xtf indexing results. Source for json xslt -->
        <property name="collection_xml.dir" value="${dist.dir}/collection-xml"/><!-- collection info broken down by file -->
        <property name="viewer-json.dir"  value="${dist.dir}/json-viewer"/><!-- Destination dir for json xslt -->
        <property name="solr-json.dir"  value="${dist.dir}/json-solr"/>
        <property name="dp-json.dir"  value="${dist.dir}/json-dp"/>
        
        <!-- Comprehensive builds -->
        
        <target name="extended" depends="_itemise-collection, full"/>
        
        <target name="full" depends="metadata-and-transcripts, json"/>
        
        <target name="full-metadata-update" depends="metadata, json"/>
        
        <target name="metadata-and-transcripts" depends="transcripts, metadata"/>
        
        <target name="transcripts" depends="_create-pages, _transform-pages">
            
            <retry retrycount="6">
                <delete dir="${chunk.dir}" failonerror="no" />
            </retry>
            <retry retrycount="6">
                <delete dir="${tmp.dir}" failonerror="no" />
            </retry>
            <retry retrycount="6">
                <delete dir="${dev.null}" />
            </retry>
        </target>
        
        <target name="metadata">
            <mkdir dir="${core_xml.dir}"/>
            
            <fileset id="original_xml" dir="${data.dir}" includes="${files-to-process}" />
            
            <xslt destdir="${core_xml.dir}" style="../xslt/msTeiPreFilter.xsl" force="true" useimplicitfileset="false" extension=".xml" reloadstylesheet="true">
                <fileset refid="original_xml"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
                <param name="path_to_buildfile" expression="${buildfile.dir}"/>
                <param name="dest_dir" expression="${www.dir}"/>
                <param name="data_dir" expression="${data.dir}"/>
                <param name="collection_xml_dir" expression="${collection_xml.dir}"/>
            </xslt>
        </target>
        
        <target name="json" depends="viewer-json, solr-json, dp-json"/>
        
        <target name="viewer-json">
            <echo message="Generating viewer json files"/>
            
            <property name="json-tmp.dir"  value="../json-tmp"/>
            
            <retry retrycount="6">
                <delete dir="${json-tmp.dir}" failonerror="no" />
            </retry>
            
            <mkdir dir="${json-tmp.dir}"/>
            <mkdir dir="${viewer-json.dir}"/>
            
            <fileset id="indexed_files" dir="${core_xml.dir}" includes="**/${files-to-process}" />
            
            <xslt destdir="${json-tmp.dir}" style="../xslt/viewer-json.xsl" force="true" useimplicitfileset="false" extension=".json" reloadstylesheet="true">
                <fileset refid="indexed_files"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
            </xslt>
            
            <move todir="${viewer-json.dir}" flatten="true">
                <fileset dir="${json-tmp.dir}">
                    <include name="**/*.json"/>
                </fileset>
            </move>
            
            <retry retrycount="6">
                <delete dir="${json-tmp.dir}" failonerror="no" />
            </retry>
        </target>
        
        <target name="dp-json">
            <echo message="Generating DP json file"/>
            
            <property name="json-tmp.dir"  value="../json-tmp"/>
            
            <retry retrycount="6">
                <delete dir="${json-tmp.dir}" failonerror="no" />
            </retry>
            
            <mkdir dir="${json-tmp.dir}"/>
            <mkdir dir="${dp-json.dir}"/>
            
            <fileset id="indexed_files" dir="${core_xml.dir}" includes="**/${files-to-process}" />
            
            <xslt destdir="${json-tmp.dir}" style="../xslt/dp-json.xsl" force="true" useimplicitfileset="false" extension=".json" reloadstylesheet="true">
                <fileset refid="indexed_files"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
            </xslt>
            
            <move todir="${dp-json.dir}" flatten="true">
                <fileset dir="${json-tmp.dir}">
                    <include name="**/*.json"/>
                </fileset>
            </move>
            
            <retry retrycount="6">
                <delete dir="${json-tmp.dir}" failonerror="no" />
            </retry>
        </target>
        
        <target name="solr-json">
            <echo message="Generating solr json files"/>
            
            <property name="json-tmp.dir"  value="../json-tmp"/>
            
            <retry retrycount="6">
                <delete dir="${json-tmp.dir}" failonerror="no" />
            </retry>
            
            <mkdir dir="${json-tmp.dir}"/>
            <mkdir dir="${solr-json.dir}"/>
            
            <fileset id="indexed_files" dir="${core_xml.dir}" includes="**/${files-to-process}" />
            
            <xslt destdir="${json-tmp.dir}" style="../xslt/solr-json.xsl" force="true" useimplicitfileset="false" extension=".json" reloadstylesheet="true">
                <fileset refid="indexed_files"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
            </xslt>
            
            <move todir="${solr-json.dir}" flatten="true">
                <fileset dir="${json-tmp.dir}">
                    <include name="**/*.json"/>
                </fileset>
            </move>
            
            <retry retrycount="6">
                <delete dir="${json-tmp.dir}" failonerror="no" />
            </retry>
        </target>
        
        <!-- Private tasks called from main tasks -->
        
        <target name="_create-pages">
            <retry retrycount="6">
                <delete dir="${chunk.dir}" failonerror="no" />
            </retry>
            
            <!-- Do we remove any unused transcription pages or leave them?
                     Since the major work occurs on staging, it might be possible to
                     create a lambda that does a preflight tidy of all resources. It 
                     would require processor power to work, but the existing test build
                     would provide a basis for identifying pages not pointed to by core-xml.
                     Removed classmarks would require collecting all the base file globs
                     (non-transc stuff) and comparing with what's in the data source.
                     The collections could be rebuilt after this for one final check, if
                     needed
               -->
            <!--<retry retrycount="6">
                <delete dir="${web.dir}" />
            </retry>-->
            <retry retrycount="6">
                <delete dir="${dev.null}" />
            </retry>
            <retry retrycount="6">
                <delete dir="${tmp.dir}" />
            </retry>
            
            <mkdir dir="${chunk.dir}"/>
            <mkdir dir="${www.dir}"/>
            <mkdir dir="${tmp.dir}"/>
            
            <fileset id="original_xml" dir="${data.dir}" includes="${files-to-process}" />
            
            <echo>Breaking files into smaller chunks</echo>
            <!-- pagify.xsl creates multiple output files from each document passed to it using xsl:result-document. It replicates the hierarchy of the 
                 data files using the path_to_buildfile, data_dir parameters and creates the same hierarchy in dest_dir.
                 
                 Unfortunately, ant's xslt task  can't tell (or be made to realise) that an xsl stylesheet might be manually outputting files using
                 xsl:result-document. It assumes that each document passed to it will produce a single result document written to <xslt>/@destdir.
                 This isn't a problem for the render phase of the process (msTeiTrans.xsl) since that's precisely what we want. However, for this 
                 transformation, we end up with:
                 a) the actual xsl:result-document that are written to dest_dir
                 b) a series of empty .html documents written to <xslt>/@destdir. Normally, I'd have made @destdir point to /dev/null, but this
                    causes errors because ant tries to replicate the folder hierarchy there and this causes an error. I therefore have forced these
                    files to be written to dev.null (defined above).
                 
                 None of this is new. It's how the transformation has always run. It's just that I felt the need to document it better now.
            -->
            <xslt destdir="${dev.null}" style="../xslt/transcription/pagify.xsl" force="true" useimplicitfileset="false" reloadstylesheet="true">
                <fileset refid="original_xml"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
                <param name="path_to_buildfile" expression="${buildfile.dir}"/>
                <param name="dest_dir" expression="${chunk.dir}"/>
                <param name="data_dir" expression="${data.dir}"/>
                <param name="num_chunks" expression="8"/>
            </xslt>
            
            <retry retrycount="6">
                <delete dir="${dev.null}" />
            </retry>
        </target>
        
        <target name="_transform-pages" if="${files.exist}" depends="if.chunks.exist">
            <echo>Paginating XML</echo>
            
            <fileset id="chunk_xml" dir="${chunk.dir}" includes="**/*.xml" />
            
            <xslt destdir="${dev.null}" style="../xslt/transcription/pagify.xsl" force="true" useimplicitfileset="false" reloadstylesheet="true">
                <fileset refid="chunk_xml"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
                <param name="path_to_buildfile" expression="${buildfile.dir}"/>
                <param name="dest_dir" expression="${tmp.dir}"/>
                <param name="data_dir" expression="${chunk.dir}"/>
                <param name="num_chunks" expression="1"/>
            </xslt>
            
            <retry retrycount="6">
                <delete dir="${dev.null}" />
            </retry>
            
            <echo>Transforming page xml into html</echo>
            
            <fileset id="page_files" dir="${tmp.dir}" includes="**/*.xml" />
            
            <xslt destdir="${www.dir}" style="../xslt/transcription/msTeiTrans.xsl" force="true" useimplicitfileset="false" extension=".html" reloadstylesheet="true">
                <fileset refid="page_files"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
            </xslt>
            
            <copy todir="${www.dir}">
                <fileset dir="../xslt/transcription/web/">
                </fileset>
            </copy>
            
            <retry retrycount="6">
                <delete dir="${chunk.dir}" failonerror="no" />
            </retry>
            <retry retrycount="6">
                <delete dir="${tmp.dir}" failonerror="no" />
            </retry>
        </target>
        
        <target name="_itemise-collection">
            <echo message="Generating item collection xml files"/>
            
            <!-- Concurrency issue:   Any item removed from collection must be removed from collection_xml.dir.
                                      But, deleting the directory outright before rebuilding will cause  other 
                                      running data builds to fail.
                                      The only solution I can see is generating the collection dir locally and
                                      copying it over. There's a slight risk that another build might try to load
                                      an invalid XML file (while copying in progress).
            -->
            <retry retrycount="6">
                <delete dir="${collection_xml.dir}" failonerror="no" />
            </retry>
            
            <mkdir dir="${collection_xml.dir}"/>
            
            <fileset id="core_xml" dir="${data.dir}" includes="**/${files-to-process}" />
            
            <xslt out="../catalog.out" in="../xslt/cache-collection-info.xsl" style="../xslt/cache-collection-info.xsl" force="true" useimplicitfileset="false" extension=".xml" reloadstylesheet="true">
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
                <param name="path_to_buildfile" expression="${buildfile.dir}"/>
                <param name="dest_dir" expression="${collection_xml.dir}"/>
                <param name="data_dir" expression="${collection.json.dir}"/>
            </xslt>
            
            <delete file="../catalog.out"/>
        </target>
        
        <target name="collection-update" depends="_update-core-xml,viewer-json,solr-json"/>
        
        <target name="_update-core-xml">
            <echo message="Updating core-xml collection info"/>
            
            <property name="dest_tmp.dir" value="${core_xml.dir}-tmp"/>
            
            <retry retrycount="6">
                <delete dir="${dest_tmp.dir}" failonerror="no" />
            </retry>
            
            <mkdir dir="${dest_tmp.dir}"/>
            
            <fileset id="core_xml" dir="${core_xml.dir}" includes="**/${files-to-process}" />
            
            <xslt destdir="${dest_tmp.dir}" style="../xslt/update-collection-info.xsl" force="true" useimplicitfileset="false" extension=".xml" reloadstylesheet="true">
                <fileset refid="core_xml"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
                <param name="path_to_buildfile" expression="${buildfile.dir}"/>
                <param name="collection_xml_dir" expression="${collection_xml.dir}"/>
            </xslt>
            
            <copy todir="${core_xml.dir}" >  
                <fileset dir="${dest_tmp.dir}">  
                    <include name="**/*.xml"/>
                </fileset>
            </copy>
        </target>
        
        <target name="checksum-sources">
            <echo>Writing checksum sources</echo>
            
            <retry retrycount="6">
                <delete dir="${checksum-src.dir}" failonerror="no" />
            </retry>
            
            <mkdir dir="${checksum-src.dir}"/>
            
            <fileset id="original_xml" dir="${data.dir}" includes="**/${files-to-process}" />
            
            <xslt destdir="${dev.null}" style="../xslt/transcription/checksum-source.xsl" force="true" useimplicitfileset="false" reloadstylesheet="true">
                <fileset refid="original_xml"/>
                <factory name="net.sf.saxon.TransformerFactoryImpl">
                    <attribute name="http://saxon.sf.net/feature/xinclude-aware"
                        value="true"/>
                </factory>
                <param name="path_to_buildfile" expression="${buildfile.dir}"/>
                <param name="data_dir" expression="${data.dir}"/>
                <param name="dest_dir" expression="${checksum-src.dir}"/>
            </xslt>
        </target>
        
        <target name="if.chunks.exist">
            <condition property="files.exist"><resourcecount when="greater" count="0">
                <fileset id="page_files" dir="${chunk.dir}" includes="**/*.xml" />
            </resourcecount>
            </condition>
        </target>
        
        

        
    </project>
